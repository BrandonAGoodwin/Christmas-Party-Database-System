--Menu(mid, description, costprice) 
-- costprice: Cost per person

CREATE TABLE Menu (
	mid				INTEGER		NOT NULL UNIQUE,
	description		VARCHAR(50),
	costprice		INTEGER,
	PRIMARY KEY (mid),
	CHECK (costprice>=0)
);

--Venue(vid, name, venuecost)

CREATE TABLE Venue (
	vid				INTEGER		NOT NULL UNIQUE,
	name			VARCHAR(30),
	venuecost		INTEGER,
	PRIMARY KEY (vid),
	CHECK (venuecost>=0)
);

--Entertainment(eid, description, costprice) 

CREATE TABLE Entertainment (
	eid				INTEGER		NOT NULL UNIQUE,
	description		VARCHAR(50),
	costprice		INTEGER,
	PRIMARY KEY (eid),
	CHECK (costprice>=0)
);

--Party (pid, name, mid, vid, eid, price, timing, numberofguests) 

CREATE TABLE Party (
	pid				INTEGER		NOT NULL UNIQUE,
	name			VARCHAR(30),
	mid				INTEGER,
	vid				INTEGER,
	eid				INTEGER,
	price			INTEGER,
	timing			TIMESTAMP,
	numberofguests	INTEGER,
	PRIMARY KEY (pid),
	FOREIGN KEY (mid) REFERENCES Menu,
	FOREIGN KEY (vid) REFERENCES Venue,
	FOREIGN KEY (eid) REFERENCES Entertainment,
	CHECK (price>=0),
	CHECK (numberofguests>=1)
);

-- Party Report

SELECT
	Party.pid,
	Party.name,
	Venue.name AS venue,
	Menu.description AS menu,
	Entertainment.description AS entertainment,
	Party.numberofguests,
	Party.price,
	Venue.venuecost+Entertainment.costprice+Menu.costprice*Party.numberofguests AS profit
FROM Party
INNER JOIN Venue ON Party.vid = Venue.vid
INNER JOIN Menu ON Party.mid = Menu.mid
INNER JOIN Entertainment ON Party.eid = Entertainment.eid
WHERE Party.pid = userinput;

-- Menu Report

SELECT * FROM
	(SELECT
		Menu.mid,
		Menu.description,
		Menu.costprice,
		COUNT(Menu.mid),
		SUM(Party.numberofguests)
	FROM Menu
	LEFT JOIN Party ON Party.mid = Menu.mid
	GROUP BY Menu.mid, Menu.description, Menu.costprice) AS res
WHERE res.mid = userinput;


https://stackoverflow.com/questions/18672643/how-to-print-a-table-of-information-in-java